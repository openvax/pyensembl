# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from typing import TYPE_CHECKING, List, Literal, Optional, Tuple, Union

from memoized_property import memoized_property

from .common import memoize
from .locus_with_genome import LocusWithGenome

if TYPE_CHECKING:
    from .exon import Exon
    from .gene import Gene
    from .genome import Genome

class Transcript(LocusWithGenome):
    def __init__(
        self,
        transcript_id: str,
        transcript_name: str,
        contig: str,
        start: int,
        end: int,
        strand: Literal["+", "-"],
        biotype: str,
        gene_id: str,
        genome: Genome,
        support_level: Optional[int] = None,
    ): ...
    @property
    def id(self) -> str: ...
    @property
    def name(self) -> str: ...
    def __str__(self) -> str: ...
    def __len__(self) -> int: ...
    def __eq__(self, other) -> bool: ...
    def __hash__(self) -> int: ...
    def to_dict(self) -> dict[str, Union[str, int]]: ...
    @property
    def gene(self) -> Gene: ...
    @property
    def gene_name(self) -> str: ...
    @property
    def exons(self) -> List[Exon]: ...

    _TRANSCRIPT_FEATURES: set[str] = {"start_codon", "stop_codon", "UTR", "CDS"}

    @memoize
    def _transcript_feature_position_ranges(
        self, feature: Literal["start_codon", "stop_codon", "UTR", "CDS"], required=True
    ) -> List[Tuple[int, int]]: ...
    @memoize
    def _transcript_feature_positions(
        self, feature: Literal["start_codon", "stop_codon", "UTR", "CDS"]
    ) -> List[int]: ...
    @memoize
    def _codon_positions(
        self, feature: Literal["start_codon", "stop_codon"]
    ) -> List[int]: ...
    @memoized_property
    def contains_start_codon(self) -> bool: ...
    @memoized_property
    def contains_stop_codon(self) -> bool: ...
    @memoized_property
    def start_codon_complete(self) -> bool: ...
    @memoized_property
    def start_codon_positions(self) -> List[int]: ...
    @memoized_property
    def stop_codon_positions(self) -> List[int]: ...
    @memoized_property
    def exon_intervals(self) -> List[Tuple[int, int]]: ...
    def spliced_offset(self, position: int) -> int: ...
    @memoized_property
    def start_codon_unspliced_offsets(self) -> List[int]: ...
    @memoized_property
    def stop_codon_unspliced_offsets(self) -> List[int]: ...
    def _contiguous_offsets(self, offsets: list[int]) -> list[int]: ...
    @memoized_property
    def start_codon_spliced_offsets(self) -> List[int]: ...
    @memoized_property
    def stop_codon_spliced_offsets(self) -> List[int]: ...
    @memoized_property
    def coding_sequence_position_ranges(self) -> List[Tuple[int, int]]: ...
    @memoized_property
    def complete(self) -> bool: ...
    @memoized_property
    def sequence(self) -> str: ...
    @memoized_property
    def first_start_codon_spliced_offset(self) -> int: ...
    @memoized_property
    def last_stop_codon_spliced_offset(self) -> int: ...
    @memoized_property
    def coding_sequence(self) -> str: ...
    @memoized_property
    def five_prime_utr_sequence(self) -> str: ...
    @memoized_property
    def three_prime_utr_sequence(self) -> str: ...
    @memoized_property
    def protein_id(self) -> Optional[str]: ...
    @memoized_property
    def protein_sequence(self) -> Optional[str]: ...
