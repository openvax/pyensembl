# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from typing import Dict, Literal, Optional, Union
from serializable import Serializable

class Locus(Serializable):
    def __init__(
        self, contig: str, start: int, end: int, strand: Literal["+", "-"]
    ) -> None: ...
    def __str__(self) -> str: ...
    def __len__(self) -> int: ...
    def __eq__(self, other) -> bool: ...
    def to_tuple(self) -> tuple[str, int, int, Literal["+", "-"]]: ...
    def __lt__(self, other) -> bool: ...
    def __le__(self, other) -> bool: ...
    def __gt__(self, other) -> bool: ...
    def __ge__(self, other) -> bool: ...
    def to_dict(self) -> Dict[str, Union[str, int]]: ...
    @property
    def length(self) -> int: ...
    def offset(self, position: int) -> int: ...
    def offset_range(self, start: int, end: int) -> tuple[int, int]: ...
    def on_contig(self, contig: Union[str, int]) -> bool: ...
    def on_strand(self, strand: Literal["+", "-", 1, -1, "+1", "-1"]) -> bool: ...
    @property
    def on_forward_strand(self) -> bool: ...
    @property
    def on_positive_strand(self) -> bool: ...
    @property
    def on_backward_strand(self) -> bool: ...
    @property
    def on_negative_strand(self) -> bool: ...
    def can_overlap(
        self, contig: Union[str, int], strand: Optional[Literal["+", "-"]] = None
    ): ...
    def distance_to_interval(self, start: int, end: int) -> int: ...
    def distance_to_locus(self, other: "Locus") -> Union[int, float]: ...
    def overlaps(
        self,
        contig: Union[str, int],
        start: int,
        end: int,
        strand: Optional[Literal["+", "-"]] = None,
    ) -> bool: ...
    def overlaps_locus(self, other_locus: "Locus") -> bool: ...
    def contains(
        self,
        contig: Union[str, int],
        start: int,
        end: int,
        strand: Optional[Literal["+", "-"]] = None,
    ) -> bool: ...
    def contains_locus(self, other_locus: "Locus"): ...
