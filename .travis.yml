language: python
dist: trusty
sudo: false
python:
  - "2.7"
  - "3.6"
git:
  # don't need the default depth of 50
  # but don't want to use a depth of 1 since that affects
  # whether jobs run when you have multiple commits queued
  # https://github.com/travis-ci/travis-ci/issues/4575
  depth: 10
cache:
  # Cache pip installed dependencies
  pip: true
  # cache directory used for Ensembl downloads of GTF and FASTA files
  # along with the indexed db of intervals and ID mappings and pickles
  # of sequence dictionaries.
  ## ---
  ## Commenting this out for now due to failure of upload of cached data
  ## to Travis at the end of build, probably exceeding some storage limit?
  ##  - $HOME/.cache/pyensembl/
env:
  global:
    # MHC_BUNDLE_PASS = encrypted value
    # Won't be available for PRs from external contributors
    - secure: "B2bLOYhDD1mSH6nBmUVoyoVzO8CsZ/qeduoQ/gq1UqPXyBa5cj8x1hYeYEXMVGH04dq6p5FHKIZoZOOmgtKoemje5enSV8IL2lttASqNvzsiyvy6I4C3r5Ve2H9HMLneDxkarfVVVhG2ZJyO7Y/vGN8STZWX6N3FJfCJ1B5kV5Q="
    - CONDA_ENV="test-environment-$TRAVIS_PYTHON_VERSION"
addons:
  apt:
    packages:
      # Needed for NetMHC
      - tcsh
before_install:
  - echo "TRAVIS_PYTHON_VERSION=$TRAVIS_PYTHON_VERSION"
  - echo "CONDA_ENV=$CONDA_ENV"
  # download different versions of mini-conda for py2 vs. py3
  - |
    if [[ "$TRAVIS_PYTHON_VERSION" == "2.7" ]]; then
      wget https://repo.continuum.io/miniconda/Miniconda-latest-Linux-x86_64.sh -O miniconda.sh;
    else
      wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh;
    fi
  - bash miniconda.sh -b -p $HOME/miniconda
  - export PATH="$HOME/miniconda/bin:$PATH"
  # reset the shell's lookup table for program name to path mappings
  - hash -r
  - conda config --set always_yes yes --set changeps1 no
  - conda update -q conda
  # Useful for debugging any issues with conda
  - conda info -a
  # install non-public MHC predictors if running within OpenVax org
  - |
    if [ -n "$MHC_BUNDLE_PASS" ]; then
      git clone https://mhcbundle:$MHC_BUNDLE_PASS@github.com/openvax/netmhc-bundle.git;
      export NETMHC_BUNDLE_HOME=$PWD/netmhc-bundle;
      mkdir tmp;
      export NETMHC_BUNDLE_TMPDIR=$PWD/tmp;
      export PATH=$PATH:$NETMHC_BUNDLE_HOME/bin;
    fi
  - git clone https://github.com/openvax/openvax-integration-tests.git
install:
  - >
      conda create -q -n $CONDA_ENV python=$TRAVIS_PYTHON_VERSION
      numpy nose pandas
  - source activate $CONDA_ENV
  # install pysam from conda because I'm having trouble installing Cython
  # for Python 3 on Travis
  - conda install -c bioconda pysam=0.9.0
  - python --version #  make sure we're running the Python version we expect
  - pip install -r requirements.txt
  - pip install .
  - pip install coveralls
  # install requirements for integration tests
  - pip install --upgrade -r $PWD/openvax-integration-tests/requirements.txt
  # download MHCflurry models for integration tests
  - mhcflurry-downloads fetch models_class1_minimal
  - export MHCFLURRY_DEFAULT_CLASS1_MODELS="$(mhcflurry-downloads path models_class1_minimal)/models"
before_script:
  - ./lint.sh
  - echo "Before installing Ensembl releases" && df -h
   # Ensembl 75
  - >
      pyensembl install
      --release 75
      --species human
      --custom-mirror https://github.com/openvax/ensembl-data/releases/download/GRCh37.75/
  - echo "Installed Ensembl 75" && df -h
  # Ensembl 77
  - >
      pyensembl install
      --release 77
      --species human
      --custom-mirror https://github.com/openvax/ensembl-data/releases/download/GRCh38.77/
  - echo "Installed Ensembl 77" && df -h
  # Ensembl 93
  - >
      pyensembl install
      --release 93
      --species human
      --custom-mirror https://github.com/openvax/ensembl-data/releases/download/GRCh38.93/
  - echo "Installed Ensembl 93 for humans" && df -h
  # latest mouse release
  - >
      pyensembl install
      --release 93
      --species mouse
      --custom-mirror https://github.com/openvax/ensembl-data/releases/download/GRCm38.93/
  - echo "Installed Ensembl 93 for mice" && df -h
script:
  # -a '!skip' lets us skip certain tests on travis (relevant for integration tests)
  # this command runs both pyensembl and integration tests. Sometimes they don't print output for a long
  # time; travis_wait extends the time allowed with no output.
  - >
      nosetests -sv test --with-coverage --cover-package=pyensembl  &&
      travis_wait nosetests -sv $PWD/openvax-integration-tests -a '!skip'
after_success:
  coveralls
deploy:
  provider: pypi
  distributions: sdist
  user: openvax
  password: # See http://docs.travis-ci.com/user/encryption-keys/
    secure: "jr1jd8CbCoXaFLF9sxv1qwbxj6WxqA90K98fFj2IXTqWtNSnGL4xdGC7+pSuKdDSN2yxzs6As7sfo0GUAhSfwFGC8pd7W6ckoxq+G6JmYSfxQ5HTOtK4L/7a8gYqEi01arWu4rR9tHu/yv6dCeK8an7hl9vlREYHfAKgJDYAB0I="
  on:
    branch: master
    condition: $TRAVIS_PYTHON_VERSION = "2.7"

